// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/dandynaufaldi/idy-go/domain/model"

// IdeaRepository is an autogenerated mock type for the IdeaRepository type
type IdeaRepository struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *IdeaRepository) All() ([]*model.Idea, error) {
	ret := _m.Called()

	var r0 []*model.Idea
	if rf, ok := ret.Get(0).(func() []*model.Idea); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Idea)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: ideaID
func (_m *IdeaRepository) ByID(ideaID *model.IdeaID) (*model.Idea, error) {
	ret := _m.Called(ideaID)

	var r0 *model.Idea
	if rf, ok := ret.Get(0).(func(*model.IdeaID) *model.Idea); ok {
		r0 = rf(ideaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Idea)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.IdeaID) error); ok {
		r1 = rf(ideaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: idea
func (_m *IdeaRepository) Save(idea *model.Idea) error {
	ret := _m.Called(idea)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Idea) error); ok {
		r0 = rf(idea)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
